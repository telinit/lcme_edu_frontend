{-
   LCME EDU API
   ...

   The version of the OpenAPI document: v1
   Contact: sysadmin@lnmo.ru

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Activity
    , ActivityContentType(..)
    , ActivityFinalType(..)
    , BulkSetActivities
    , Counters
    , CourseDeep
    , CourseDeepType(..)
    , CourseEnrollmentRead
    , CourseEnrollmentReadRole(..)
    , CourseEnrollmentWrite
    , CourseEnrollmentWriteRole(..)
    , CourseShallow
    , CourseShallowType(..)
    , Department
    , EducationShallow
    , EducationSpecialization
    , ErrorMessage
    , File
    , ImportForCourse
    , ImportForCourseResult
    , ImportForCourseResultObject
    , Login
    , Mark
    , Message
    , MessageType(..)
    , Organization
    , ResetPasswordComplete
    , ResetPasswordRequest
    , SetEmail
    , SetPassword
    , Token
    , UnreadObject
    , UnreadObjectType(..)
    , UserDeep
    , UserDeepGroupsInner
    , UserShallow
    , activityContentTypeVariants
    , activityDecoder
    , activityFinalTypeDecoder
    , activityFinalTypeVariants
    , bulkSetActivitiesDecoder
    , countersDecoder
    , courseDeepDecoder
    , courseDeepTypeVariants
    , courseEnrollmentReadDecoder
    , courseEnrollmentReadRoleVariants
    , courseEnrollmentWriteDecoder
    , courseEnrollmentWriteRoleVariants
    , courseShallowDecoder
    , courseShallowTypeVariants
    , departmentDecoder
    , educationShallowDecoder
    , educationSpecializationDecoder
    , encodeActivity
    , encodeBulkSetActivities
    , encodeCounters
    , encodeCourseDeep
    , encodeCourseEnrollmentRead
    , encodeCourseEnrollmentWrite
    , encodeCourseShallow
    , encodeDepartment
    , encodeEducationShallow
    , encodeEducationSpecialization
    , encodeErrorMessage
    , encodeFile
    , encodeImportForCourse
    , encodeImportForCourseResult
    , encodeImportForCourseResultObject
    , encodeLogin
    , encodeMark
    , encodeMessage
    , encodeOrganization
    , encodeResetPasswordComplete
    , encodeResetPasswordRequest
    , encodeSetEmail
    , encodeSetPassword
    , encodeToken
    , encodeUnreadObject
    , encodeUserDeep
    , encodeUserDeepGroupsInner
    , encodeUserShallow
    , errorMessageDecoder
    , fileDecoder
    , importForCourseDecoder
    , importForCourseResultDecoder
    , importForCourseResultObjectDecoder
    , loginDecoder
    , markDecoder
    , messageDecoder
    , messageTypeVariants
    , organizationDecoder
    , resetPasswordCompleteDecoder
    , resetPasswordRequestDecoder
    , setEmailDecoder
    , setPasswordDecoder
    , stringFromActivityFinalType
    , tokenDecoder
    , unreadObjectDecoder
    , unreadObjectTypeVariants
    , userDeepDecoder
    , userDeepGroupsInnerDecoder
    , userShallowDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode
import Uuid exposing (Uuid)



-- MODEL


type alias Activity =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , contentType : Maybe ActivityContentType
    , title : String
    , keywords : Maybe String
    , lessonType : Maybe String
    , isHidden : Maybe Bool
    , marksLimit : Maybe Int
    , hours : Maybe Int
    , fgosComplient : Maybe Bool
    , order : Int
    , date : Maybe Posix
    , group : Maybe String
    , scientificTopic : Maybe String
    , body : Maybe String
    , dueDate : Maybe Posix
    , submittable : Maybe Bool
    , link : Maybe String
    , embed : Maybe Bool
    , finalType : Maybe ActivityFinalType
    , course : Uuid
    , linkedActivity : Maybe Uuid
    , files : Maybe (List Uuid)
    }


type ActivityContentType
    = ActivityContentTypeGEN
    | ActivityContentTypeTXT
    | ActivityContentTypeTSK
    | ActivityContentTypeLNK
    | ActivityContentTypeMED
    | ActivityContentTypeFIN


activityContentTypeVariants : List ActivityContentType
activityContentTypeVariants =
    [ ActivityContentTypeGEN
    , ActivityContentTypeTXT
    , ActivityContentTypeTSK
    , ActivityContentTypeLNK
    , ActivityContentTypeMED
    , ActivityContentTypeFIN
    ]


type ActivityFinalType
    = ActivityFinalTypeQ1
    | ActivityFinalTypeQ2
    | ActivityFinalTypeQ3
    | ActivityFinalTypeQ4
    | ActivityFinalTypeH1
    | ActivityFinalTypeH2
    | ActivityFinalTypeY
    | ActivityFinalTypeE
    | ActivityFinalTypeF


activityFinalTypeVariants : List ActivityFinalType
activityFinalTypeVariants =
    [ ActivityFinalTypeQ1
    , ActivityFinalTypeQ2
    , ActivityFinalTypeQ3
    , ActivityFinalTypeQ4
    , ActivityFinalTypeH1
    , ActivityFinalTypeH2
    , ActivityFinalTypeY
    , ActivityFinalTypeE
    , ActivityFinalTypeF
    ]


type alias BulkSetActivities =
    { create : List Activity
    , update : Dict.Dict String Activity
    }


type alias Counters =
    { courses : Int
    , users : Int
    , activities : Int
    , marks : Int
    }


type alias CourseDeep =
    { id : Maybe Uuid
    , forSpecialization : Maybe EducationSpecialization
    , logo : Maybe File
    , cover : Maybe File
    , activities : List Activity
    , enrollments : List CourseEnrollmentRead
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , type_ : Maybe CourseDeepType
    , title : String
    , description : String
    , forClass : Maybe String
    , forGroup : Maybe String
    }


type CourseDeepType
    = CourseDeepTypeGEN
    | CourseDeepTypeEDU
    | CourseDeepTypeSEM
    | CourseDeepTypeCLB
    | CourseDeepTypeELE


courseDeepTypeVariants : List CourseDeepType
courseDeepTypeVariants =
    [ CourseDeepTypeGEN
    , CourseDeepTypeEDU
    , CourseDeepTypeSEM
    , CourseDeepTypeCLB
    , CourseDeepTypeELE
    ]


type alias CourseEnrollmentRead =
    { id : Maybe Uuid
    , person : UserShallow
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , role : CourseEnrollmentReadRole
    , finishedOn : Maybe Posix
    , course : Uuid
    }


type CourseEnrollmentReadRole
    = CourseEnrollmentReadRoleT
    | CourseEnrollmentReadRoleS


courseEnrollmentReadRoleVariants : List CourseEnrollmentReadRole
courseEnrollmentReadRoleVariants =
    [ CourseEnrollmentReadRoleT
    , CourseEnrollmentReadRoleS
    ]


type alias CourseEnrollmentWrite =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , role : CourseEnrollmentWriteRole
    , finishedOn : Maybe Posix
    , person : Uuid
    , course : Uuid
    }


type CourseEnrollmentWriteRole
    = CourseEnrollmentWriteRoleT
    | CourseEnrollmentWriteRoleS


courseEnrollmentWriteRoleVariants : List CourseEnrollmentWriteRole
courseEnrollmentWriteRoleVariants =
    [ CourseEnrollmentWriteRoleT
    , CourseEnrollmentWriteRoleS
    ]


type alias CourseShallow =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , type_ : Maybe CourseShallowType
    , title : String
    , description : String
    , forClass : Maybe String
    , forGroup : Maybe String
    , forSpecialization : Maybe Uuid
    , logo : Maybe Uuid
    , cover : Maybe Uuid
    }


type CourseShallowType
    = CourseShallowTypeGEN
    | CourseShallowTypeEDU
    | CourseShallowTypeSEM
    | CourseShallowTypeCLB
    | CourseShallowTypeELE


courseShallowTypeVariants : List CourseShallowType
courseShallowTypeVariants =
    [ CourseShallowTypeGEN
    , CourseShallowTypeEDU
    , CourseShallowTypeSEM
    , CourseShallowTypeCLB
    , CourseShallowTypeELE
    ]


type alias Department =
    { id : Maybe Uuid
    , organization : Organization
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , name : String
    }


type alias EducationShallow =
    { id : Maybe Uuid
    , specialization : Maybe EducationSpecialization
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , started : Posix
    , finished : Maybe Posix
    , startingClass : String
    , finishingClass : Maybe String
    , student : Uuid
    }


type alias EducationSpecialization =
    { id : Maybe Uuid
    , department : Department
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , name : String
    }


type alias ErrorMessage =
    { code : Int
    , message : String
    }


type alias File =
    { id : Maybe Uuid
    , downloadUrl : Maybe String
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , name : String
    , hash : String
    , size : Int
    , mimeType : String
    }


type alias ImportForCourse =
    { data : String
    , sep : String
    , courseId : Uuid
    }


type alias ImportForCourseResult =
    { objects : List ImportForCourseResultObject
    }


type alias ImportForCourseResultObject =
    { index : Int
    , type_ : String
    , topic : String
    }


type alias Login =
    { username : String
    , password : String
    }


type alias Mark =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , value : String
    , comment : Maybe String
    , author : Uuid
    , student : Uuid
    , activity : Uuid
    }


type alias Message =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , type_ : Maybe MessageType
    , body : Maybe String
    , manualCategory : Maybe String
    , manualAudience : Maybe String
    , thread : Maybe Uuid
    , sender : Uuid
    , receiver : Maybe Uuid
    , attachments : Maybe (List Uuid)
    }


type MessageType
    = MessageTypeTHR
    | MessageTypePRV
    | MessageTypeNEW
    | MessageTypeMAN


messageTypeVariants : List MessageType
messageTypeVariants =
    [ MessageTypeTHR
    , MessageTypePRV
    , MessageTypeNEW
    , MessageTypeMAN
    ]


type alias Organization =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , name : String
    , nameShort : Maybe String
    }


type alias ResetPasswordComplete =
    { password : String
    , token : String
    }


type alias ResetPasswordRequest =
    { login : String
    }


type alias SetEmail =
    { email : String
    }


type alias SetPassword =
    { password : String
    }


type alias Token =
    { user : UserDeep
    , key : String
    }


type alias UnreadObject =
    { id : Maybe Uuid
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , obj : Uuid
    , type_ : Maybe UnreadObjectType
    , created : Posix
    , user : Uuid
    }


type UnreadObjectType
    = UnreadObjectTypeMSG
    | UnreadObjectTypeMRK
    | UnreadObjectTypeCRS
    | UnreadObjectTypeACT
    | UnreadObjectTypeNWS
    | UnreadObjectTypeEDU
    | UnreadObjectTypeFLE
    | UnreadObjectTypeFRM
    | UnreadObjectTypeTSK
    | UnreadObjectTypeUNK


unreadObjectTypeVariants : List UnreadObjectType
unreadObjectTypeVariants =
    [ UnreadObjectTypeMSG
    , UnreadObjectTypeMRK
    , UnreadObjectTypeCRS
    , UnreadObjectTypeACT
    , UnreadObjectTypeNWS
    , UnreadObjectTypeEDU
    , UnreadObjectTypeFLE
    , UnreadObjectTypeFRM
    , UnreadObjectTypeTSK
    , UnreadObjectTypeUNK
    ]


type alias UserDeep =
    { id : Maybe Uuid
    , roles : Maybe (List String)
    , currentClass : Maybe String
    , children : List UserShallow
    , parents : List UserShallow
    , education : List EducationShallow
    , lastLogin : Maybe Posix
    , isSuperuser : Maybe Bool
    , username : String
    , firstName : Maybe String
    , lastName : Maybe String
    , email : Maybe String
    , isStaff : Maybe Bool
    , isActive : Maybe Bool
    , dateJoined : Maybe Posix
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , middleName : Maybe String
    , birthDate : Maybe Posix
    , avatar : Maybe String
    , groups : Maybe (List UserDeepGroupsInner)
    }


type alias UserDeepGroupsInner =
    { id : Maybe Int
    , name : String
    , permissions : Maybe (List Int)
    }


type alias UserShallow =
    { id : Maybe Uuid
    , roles : Maybe (List String)
    , currentClass : Maybe String
    , lastLogin : Maybe Posix
    , isSuperuser : Maybe Bool
    , username : String
    , firstName : Maybe String
    , lastName : Maybe String
    , email : Maybe String
    , isStaff : Maybe Bool
    , isActive : Maybe Bool
    , dateJoined : Maybe Posix
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , middleName : Maybe String
    , birthDate : Maybe Posix
    , avatar : Maybe String
    , groups : Maybe (List Int)
    , children : Maybe (List Uuid)
    }



-- ENCODER


encodeActivity : Activity -> Json.Encode.Value
encodeActivity =
    encodeObject << encodeActivityPairs


encodeActivityWithTag : ( String, String ) -> Activity -> Json.Encode.Value
encodeActivityWithTag ( tagField, tag ) model =
    encodeObject (encodeActivityPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeActivityPairs : Activity -> List EncodedField
encodeActivityPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , maybeEncode "content_type" encodeActivityContentType model.contentType
            , encode "title" Json.Encode.string model.title
            , maybeEncode "keywords" Json.Encode.string model.keywords
            , maybeEncode "lesson_type" Json.Encode.string model.lessonType
            , maybeEncode "is_hidden" Json.Encode.bool model.isHidden
            , maybeEncode "marks_limit" Json.Encode.int model.marksLimit
            , maybeEncode "hours" Json.Encode.int model.hours
            , maybeEncode "fgos_complient" Json.Encode.bool model.fgosComplient
            , encode "order" Json.Encode.int model.order
            , maybeEncodeNullable "date" Api.Time.encodeDate model.date
            , maybeEncodeNullable "group" Json.Encode.string model.group
            , maybeEncodeNullable "scientific_topic" Json.Encode.string model.scientificTopic
            , maybeEncode "body" Json.Encode.string model.body
            , maybeEncodeNullable "due_date" Api.Time.encodeDateTime model.dueDate
            , maybeEncode "submittable" Json.Encode.bool model.submittable
            , maybeEncodeNullable "link" Json.Encode.string model.link
            , maybeEncode "embed" Json.Encode.bool model.embed
            , maybeEncodeNullable "final_type" encodeActivityFinalType model.finalType
            , encode "course" Uuid.encode model.course
            , maybeEncodeNullable "linked_activity" Uuid.encode model.linkedActivity
            , maybeEncode "files" (Json.Encode.list Uuid.encode) model.files
            ]
    in
    pairs


stringFromActivityContentType : ActivityContentType -> String
stringFromActivityContentType model =
    case model of
        ActivityContentTypeGEN ->
            "GEN"

        ActivityContentTypeTXT ->
            "TXT"

        ActivityContentTypeTSK ->
            "TSK"

        ActivityContentTypeLNK ->
            "LNK"

        ActivityContentTypeMED ->
            "MED"

        ActivityContentTypeFIN ->
            "FIN"


encodeActivityContentType : ActivityContentType -> Json.Encode.Value
encodeActivityContentType =
    Json.Encode.string << stringFromActivityContentType


stringFromActivityFinalType : ActivityFinalType -> String
stringFromActivityFinalType model =
    case model of
        ActivityFinalTypeQ1 ->
            "Q1"

        ActivityFinalTypeQ2 ->
            "Q2"

        ActivityFinalTypeQ3 ->
            "Q3"

        ActivityFinalTypeQ4 ->
            "Q4"

        ActivityFinalTypeH1 ->
            "H1"

        ActivityFinalTypeH2 ->
            "H2"

        ActivityFinalTypeY ->
            "Y"

        ActivityFinalTypeE ->
            "E"

        ActivityFinalTypeF ->
            "F"


encodeActivityFinalType : ActivityFinalType -> Json.Encode.Value
encodeActivityFinalType =
    Json.Encode.string << stringFromActivityFinalType


encodeBulkSetActivities : BulkSetActivities -> Json.Encode.Value
encodeBulkSetActivities =
    encodeObject << encodeBulkSetActivitiesPairs


encodeBulkSetActivitiesWithTag : ( String, String ) -> BulkSetActivities -> Json.Encode.Value
encodeBulkSetActivitiesWithTag ( tagField, tag ) model =
    encodeObject (encodeBulkSetActivitiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBulkSetActivitiesPairs : BulkSetActivities -> List EncodedField
encodeBulkSetActivitiesPairs model =
    let
        pairs =
            [ encode "create" (Json.Encode.list encodeActivity) model.create
            , encode "update" (Json.Encode.dict identity encodeActivity) model.update
            ]
    in
    pairs


encodeCounters : Counters -> Json.Encode.Value
encodeCounters =
    encodeObject << encodeCountersPairs


encodeCountersWithTag : ( String, String ) -> Counters -> Json.Encode.Value
encodeCountersWithTag ( tagField, tag ) model =
    encodeObject (encodeCountersPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCountersPairs : Counters -> List EncodedField
encodeCountersPairs model =
    let
        pairs =
            [ encode "courses" Json.Encode.int model.courses
            , encode "users" Json.Encode.int model.users
            , encode "activities" Json.Encode.int model.activities
            , encode "marks" Json.Encode.int model.marks
            ]
    in
    pairs


encodeCourseDeep : CourseDeep -> Json.Encode.Value
encodeCourseDeep =
    encodeObject << encodeCourseDeepPairs


encodeCourseDeepWithTag : ( String, String ) -> CourseDeep -> Json.Encode.Value
encodeCourseDeepWithTag ( tagField, tag ) model =
    encodeObject (encodeCourseDeepPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCourseDeepPairs : CourseDeep -> List EncodedField
encodeCourseDeepPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , encodeNullable "for_specialization" encodeEducationSpecialization model.forSpecialization
            , encodeNullable "logo" encodeFile model.logo
            , encodeNullable "cover" encodeFile model.cover
            , encode "activities" (Json.Encode.list encodeActivity) model.activities
            , encode "enrollments" (Json.Encode.list encodeCourseEnrollmentRead) model.enrollments
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , maybeEncode "type" encodeCourseDeepType model.type_
            , encode "title" Json.Encode.string model.title
            , encode "description" Json.Encode.string model.description
            , maybeEncode "for_class" Json.Encode.string model.forClass
            , maybeEncodeNullable "for_group" Json.Encode.string model.forGroup
            ]
    in
    pairs


stringFromCourseDeepType : CourseDeepType -> String
stringFromCourseDeepType model =
    case model of
        CourseDeepTypeGEN ->
            "GEN"

        CourseDeepTypeEDU ->
            "EDU"

        CourseDeepTypeSEM ->
            "SEM"

        CourseDeepTypeCLB ->
            "CLB"

        CourseDeepTypeELE ->
            "ELE"


encodeCourseDeepType : CourseDeepType -> Json.Encode.Value
encodeCourseDeepType =
    Json.Encode.string << stringFromCourseDeepType


encodeCourseEnrollmentRead : CourseEnrollmentRead -> Json.Encode.Value
encodeCourseEnrollmentRead =
    encodeObject << encodeCourseEnrollmentReadPairs


encodeCourseEnrollmentReadWithTag : ( String, String ) -> CourseEnrollmentRead -> Json.Encode.Value
encodeCourseEnrollmentReadWithTag ( tagField, tag ) model =
    encodeObject (encodeCourseEnrollmentReadPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCourseEnrollmentReadPairs : CourseEnrollmentRead -> List EncodedField
encodeCourseEnrollmentReadPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , encode "person" encodeUserShallow model.person
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "role" encodeCourseEnrollmentReadRole model.role
            , maybeEncodeNullable "finished_on" Api.Time.encodeDateTime model.finishedOn
            , encode "course" Uuid.encode model.course
            ]
    in
    pairs


stringFromCourseEnrollmentReadRole : CourseEnrollmentReadRole -> String
stringFromCourseEnrollmentReadRole model =
    case model of
        CourseEnrollmentReadRoleT ->
            "t"

        CourseEnrollmentReadRoleS ->
            "s"


encodeCourseEnrollmentReadRole : CourseEnrollmentReadRole -> Json.Encode.Value
encodeCourseEnrollmentReadRole =
    Json.Encode.string << stringFromCourseEnrollmentReadRole


encodeCourseEnrollmentWrite : CourseEnrollmentWrite -> Json.Encode.Value
encodeCourseEnrollmentWrite =
    encodeObject << encodeCourseEnrollmentWritePairs


encodeCourseEnrollmentWriteWithTag : ( String, String ) -> CourseEnrollmentWrite -> Json.Encode.Value
encodeCourseEnrollmentWriteWithTag ( tagField, tag ) model =
    encodeObject (encodeCourseEnrollmentWritePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCourseEnrollmentWritePairs : CourseEnrollmentWrite -> List EncodedField
encodeCourseEnrollmentWritePairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "role" encodeCourseEnrollmentWriteRole model.role
            , maybeEncodeNullable "finished_on" Api.Time.encodeDateTime model.finishedOn
            , encode "person" Uuid.encode model.person
            , encode "course" Uuid.encode model.course
            ]
    in
    pairs


stringFromCourseEnrollmentWriteRole : CourseEnrollmentWriteRole -> String
stringFromCourseEnrollmentWriteRole model =
    case model of
        CourseEnrollmentWriteRoleT ->
            "t"

        CourseEnrollmentWriteRoleS ->
            "s"


encodeCourseEnrollmentWriteRole : CourseEnrollmentWriteRole -> Json.Encode.Value
encodeCourseEnrollmentWriteRole =
    Json.Encode.string << stringFromCourseEnrollmentWriteRole


encodeCourseShallow : CourseShallow -> Json.Encode.Value
encodeCourseShallow =
    encodeObject << encodeCourseShallowPairs


encodeCourseShallowWithTag : ( String, String ) -> CourseShallow -> Json.Encode.Value
encodeCourseShallowWithTag ( tagField, tag ) model =
    encodeObject (encodeCourseShallowPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCourseShallowPairs : CourseShallow -> List EncodedField
encodeCourseShallowPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , maybeEncode "type" encodeCourseShallowType model.type_
            , encode "title" Json.Encode.string model.title
            , encode "description" Json.Encode.string model.description
            , maybeEncode "for_class" Json.Encode.string model.forClass
            , maybeEncodeNullable "for_group" Json.Encode.string model.forGroup
            , maybeEncodeNullable "for_specialization" Uuid.encode model.forSpecialization
            , maybeEncodeNullable "logo" Uuid.encode model.logo
            , maybeEncodeNullable "cover" Uuid.encode model.cover
            ]
    in
    pairs


stringFromCourseShallowType : CourseShallowType -> String
stringFromCourseShallowType model =
    case model of
        CourseShallowTypeGEN ->
            "GEN"

        CourseShallowTypeEDU ->
            "EDU"

        CourseShallowTypeSEM ->
            "SEM"

        CourseShallowTypeCLB ->
            "CLB"

        CourseShallowTypeELE ->
            "ELE"


encodeCourseShallowType : CourseShallowType -> Json.Encode.Value
encodeCourseShallowType =
    Json.Encode.string << stringFromCourseShallowType


encodeDepartment : Department -> Json.Encode.Value
encodeDepartment =
    encodeObject << encodeDepartmentPairs


encodeDepartmentWithTag : ( String, String ) -> Department -> Json.Encode.Value
encodeDepartmentWithTag ( tagField, tag ) model =
    encodeObject (encodeDepartmentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDepartmentPairs : Department -> List EncodedField
encodeDepartmentPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , encode "organization" encodeOrganization model.organization
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeEducationShallow : EducationShallow -> Json.Encode.Value
encodeEducationShallow =
    encodeObject << encodeEducationShallowPairs


encodeEducationShallowWithTag : ( String, String ) -> EducationShallow -> Json.Encode.Value
encodeEducationShallowWithTag ( tagField, tag ) model =
    encodeObject (encodeEducationShallowPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEducationShallowPairs : EducationShallow -> List EncodedField
encodeEducationShallowPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , encodeNullable "specialization" encodeEducationSpecialization model.specialization
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "started" Api.Time.encodeDate model.started
            , maybeEncodeNullable "finished" Api.Time.encodeDate model.finished
            , encode "starting_class" Json.Encode.string model.startingClass
            , maybeEncodeNullable "finishing_class" Json.Encode.string model.finishingClass
            , encode "student" Uuid.encode model.student
            ]
    in
    pairs


encodeEducationSpecialization : EducationSpecialization -> Json.Encode.Value
encodeEducationSpecialization =
    encodeObject << encodeEducationSpecializationPairs


encodeEducationSpecializationWithTag : ( String, String ) -> EducationSpecialization -> Json.Encode.Value
encodeEducationSpecializationWithTag ( tagField, tag ) model =
    encodeObject (encodeEducationSpecializationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEducationSpecializationPairs : EducationSpecialization -> List EncodedField
encodeEducationSpecializationPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , encode "department" encodeDepartment model.department
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeErrorMessage : ErrorMessage -> Json.Encode.Value
encodeErrorMessage =
    encodeObject << encodeErrorMessagePairs


encodeErrorMessageWithTag : ( String, String ) -> ErrorMessage -> Json.Encode.Value
encodeErrorMessageWithTag ( tagField, tag ) model =
    encodeObject (encodeErrorMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorMessagePairs : ErrorMessage -> List EncodedField
encodeErrorMessagePairs model =
    let
        pairs =
            [ encode "code" Json.Encode.int model.code
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeFile : File -> Json.Encode.Value
encodeFile =
    encodeObject << encodeFilePairs


encodeFileWithTag : ( String, String ) -> File -> Json.Encode.Value
encodeFileWithTag ( tagField, tag ) model =
    encodeObject (encodeFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFilePairs : File -> List EncodedField
encodeFilePairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "download_url" Json.Encode.string model.downloadUrl
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "name" Json.Encode.string model.name
            , encode "hash" Json.Encode.string model.hash
            , encode "size" Json.Encode.int model.size
            , encode "mime_type" Json.Encode.string model.mimeType
            ]
    in
    pairs


encodeImportForCourse : ImportForCourse -> Json.Encode.Value
encodeImportForCourse =
    encodeObject << encodeImportForCoursePairs


encodeImportForCourseWithTag : ( String, String ) -> ImportForCourse -> Json.Encode.Value
encodeImportForCourseWithTag ( tagField, tag ) model =
    encodeObject (encodeImportForCoursePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImportForCoursePairs : ImportForCourse -> List EncodedField
encodeImportForCoursePairs model =
    let
        pairs =
            [ encode "data" Json.Encode.string model.data
            , encode "sep" Json.Encode.string model.sep
            , encode "course_id" Uuid.encode model.courseId
            ]
    in
    pairs


encodeImportForCourseResult : ImportForCourseResult -> Json.Encode.Value
encodeImportForCourseResult =
    encodeObject << encodeImportForCourseResultPairs


encodeImportForCourseResultWithTag : ( String, String ) -> ImportForCourseResult -> Json.Encode.Value
encodeImportForCourseResultWithTag ( tagField, tag ) model =
    encodeObject (encodeImportForCourseResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImportForCourseResultPairs : ImportForCourseResult -> List EncodedField
encodeImportForCourseResultPairs model =
    let
        pairs =
            [ encode "objects" (Json.Encode.list encodeImportForCourseResultObject) model.objects
            ]
    in
    pairs


encodeImportForCourseResultObject : ImportForCourseResultObject -> Json.Encode.Value
encodeImportForCourseResultObject =
    encodeObject << encodeImportForCourseResultObjectPairs


encodeImportForCourseResultObjectWithTag : ( String, String ) -> ImportForCourseResultObject -> Json.Encode.Value
encodeImportForCourseResultObjectWithTag ( tagField, tag ) model =
    encodeObject (encodeImportForCourseResultObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImportForCourseResultObjectPairs : ImportForCourseResultObject -> List EncodedField
encodeImportForCourseResultObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" Json.Encode.string model.type_
            , encode "topic" Json.Encode.string model.topic
            ]
    in
    pairs


encodeLogin : Login -> Json.Encode.Value
encodeLogin =
    encodeObject << encodeLoginPairs


encodeLoginWithTag : ( String, String ) -> Login -> Json.Encode.Value
encodeLoginWithTag ( tagField, tag ) model =
    encodeObject (encodeLoginPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLoginPairs : Login -> List EncodedField
encodeLoginPairs model =
    let
        pairs =
            [ encode "username" Json.Encode.string model.username
            , encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeMark : Mark -> Json.Encode.Value
encodeMark =
    encodeObject << encodeMarkPairs


encodeMarkWithTag : ( String, String ) -> Mark -> Json.Encode.Value
encodeMarkWithTag ( tagField, tag ) model =
    encodeObject (encodeMarkPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMarkPairs : Mark -> List EncodedField
encodeMarkPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "value" Json.Encode.string model.value
            , maybeEncode "comment" Json.Encode.string model.comment
            , encode "author" Uuid.encode model.author
            , encode "student" Uuid.encode model.student
            , encode "activity" Uuid.encode model.activity
            ]
    in
    pairs


encodeMessage : Message -> Json.Encode.Value
encodeMessage =
    encodeObject << encodeMessagePairs


encodeMessageWithTag : ( String, String ) -> Message -> Json.Encode.Value
encodeMessageWithTag ( tagField, tag ) model =
    encodeObject (encodeMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessagePairs : Message -> List EncodedField
encodeMessagePairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , maybeEncode "type" encodeMessageType model.type_
            , maybeEncode "body" Json.Encode.string model.body
            , maybeEncodeNullable "manual_category" Json.Encode.string model.manualCategory
            , maybeEncodeNullable "manual_audience" Json.Encode.string model.manualAudience
            , maybeEncodeNullable "thread" Uuid.encode model.thread
            , encode "sender" Uuid.encode model.sender
            , maybeEncodeNullable "receiver" Uuid.encode model.receiver
            , maybeEncode "attachments" (Json.Encode.list Uuid.encode) model.attachments
            ]
    in
    pairs


stringFromMessageType : MessageType -> String
stringFromMessageType model =
    case model of
        MessageTypeTHR ->
            "THR"

        MessageTypePRV ->
            "PRV"

        MessageTypeNEW ->
            "NEW"

        MessageTypeMAN ->
            "MAN"


encodeMessageType : MessageType -> Json.Encode.Value
encodeMessageType =
    Json.Encode.string << stringFromMessageType


encodeOrganization : Organization -> Json.Encode.Value
encodeOrganization =
    encodeObject << encodeOrganizationPairs


encodeOrganizationWithTag : ( String, String ) -> Organization -> Json.Encode.Value
encodeOrganizationWithTag ( tagField, tag ) model =
    encodeObject (encodeOrganizationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrganizationPairs : Organization -> List EncodedField
encodeOrganizationPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "name" Json.Encode.string model.name
            , maybeEncodeNullable "name_short" Json.Encode.string model.nameShort
            ]
    in
    pairs


encodeResetPasswordComplete : ResetPasswordComplete -> Json.Encode.Value
encodeResetPasswordComplete =
    encodeObject << encodeResetPasswordCompletePairs


encodeResetPasswordCompleteWithTag : ( String, String ) -> ResetPasswordComplete -> Json.Encode.Value
encodeResetPasswordCompleteWithTag ( tagField, tag ) model =
    encodeObject (encodeResetPasswordCompletePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResetPasswordCompletePairs : ResetPasswordComplete -> List EncodedField
encodeResetPasswordCompletePairs model =
    let
        pairs =
            [ encode "password" Json.Encode.string model.password
            , encode "token" Json.Encode.string model.token
            ]
    in
    pairs


encodeResetPasswordRequest : ResetPasswordRequest -> Json.Encode.Value
encodeResetPasswordRequest =
    encodeObject << encodeResetPasswordRequestPairs


encodeResetPasswordRequestWithTag : ( String, String ) -> ResetPasswordRequest -> Json.Encode.Value
encodeResetPasswordRequestWithTag ( tagField, tag ) model =
    encodeObject (encodeResetPasswordRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResetPasswordRequestPairs : ResetPasswordRequest -> List EncodedField
encodeResetPasswordRequestPairs model =
    let
        pairs =
            [ encode "login" Json.Encode.string model.login
            ]
    in
    pairs


encodeSetEmail : SetEmail -> Json.Encode.Value
encodeSetEmail =
    encodeObject << encodeSetEmailPairs


encodeSetEmailWithTag : ( String, String ) -> SetEmail -> Json.Encode.Value
encodeSetEmailWithTag ( tagField, tag ) model =
    encodeObject (encodeSetEmailPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetEmailPairs : SetEmail -> List EncodedField
encodeSetEmailPairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            ]
    in
    pairs


encodeSetPassword : SetPassword -> Json.Encode.Value
encodeSetPassword =
    encodeObject << encodeSetPasswordPairs


encodeSetPasswordWithTag : ( String, String ) -> SetPassword -> Json.Encode.Value
encodeSetPasswordWithTag ( tagField, tag ) model =
    encodeObject (encodeSetPasswordPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetPasswordPairs : SetPassword -> List EncodedField
encodeSetPasswordPairs model =
    let
        pairs =
            [ encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeToken : Token -> Json.Encode.Value
encodeToken =
    encodeObject << encodeTokenPairs


encodeTokenWithTag : ( String, String ) -> Token -> Json.Encode.Value
encodeTokenWithTag ( tagField, tag ) model =
    encodeObject (encodeTokenPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTokenPairs : Token -> List EncodedField
encodeTokenPairs model =
    let
        pairs =
            [ encode "user" encodeUserDeep model.user
            , encode "key" Json.Encode.string model.key
            ]
    in
    pairs


encodeUnreadObject : UnreadObject -> Json.Encode.Value
encodeUnreadObject =
    encodeObject << encodeUnreadObjectPairs


encodeUnreadObjectWithTag : ( String, String ) -> UnreadObject -> Json.Encode.Value
encodeUnreadObjectWithTag ( tagField, tag ) model =
    encodeObject (encodeUnreadObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUnreadObjectPairs : UnreadObject -> List EncodedField
encodeUnreadObjectPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , encode "obj" Uuid.encode model.obj
            , maybeEncode "type" encodeUnreadObjectType model.type_
            , encode "created" Api.Time.encodeDateTime model.created
            , encode "user" Uuid.encode model.user
            ]
    in
    pairs


stringFromUnreadObjectType : UnreadObjectType -> String
stringFromUnreadObjectType model =
    case model of
        UnreadObjectTypeMSG ->
            "MSG"

        UnreadObjectTypeMRK ->
            "MRK"

        UnreadObjectTypeCRS ->
            "CRS"

        UnreadObjectTypeACT ->
            "ACT"

        UnreadObjectTypeNWS ->
            "NWS"

        UnreadObjectTypeEDU ->
            "EDU"

        UnreadObjectTypeFLE ->
            "FLE"

        UnreadObjectTypeFRM ->
            "FRM"

        UnreadObjectTypeTSK ->
            "TSK"

        UnreadObjectTypeUNK ->
            "UNK"


encodeUnreadObjectType : UnreadObjectType -> Json.Encode.Value
encodeUnreadObjectType =
    Json.Encode.string << stringFromUnreadObjectType


encodeUserDeep : UserDeep -> Json.Encode.Value
encodeUserDeep =
    encodeObject << encodeUserDeepPairs


encodeUserDeepWithTag : ( String, String ) -> UserDeep -> Json.Encode.Value
encodeUserDeepWithTag ( tagField, tag ) model =
    encodeObject (encodeUserDeepPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserDeepPairs : UserDeep -> List EncodedField
encodeUserDeepPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "roles" (Json.Encode.list Json.Encode.string) model.roles
            , maybeEncode "current_class" Json.Encode.string model.currentClass
            , encode "children" (Json.Encode.list encodeUserShallow) model.children
            , encode "parents" (Json.Encode.list encodeUserShallow) model.parents
            , encode "education" (Json.Encode.list encodeEducationShallow) model.education
            , maybeEncodeNullable "last_login" Api.Time.encodeDateTime model.lastLogin
            , maybeEncode "is_superuser" Json.Encode.bool model.isSuperuser
            , encode "username" Json.Encode.string model.username
            , maybeEncode "first_name" Json.Encode.string model.firstName
            , maybeEncode "last_name" Json.Encode.string model.lastName
            , maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "is_staff" Json.Encode.bool model.isStaff
            , maybeEncode "is_active" Json.Encode.bool model.isActive
            , maybeEncode "date_joined" Api.Time.encodeDateTime model.dateJoined
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , maybeEncodeNullable "middle_name" Json.Encode.string model.middleName
            , maybeEncodeNullable "birth_date" Api.Time.encodeDate model.birthDate
            , maybeEncodeNullable "avatar" Json.Encode.string model.avatar
            , maybeEncode "groups" (Json.Encode.list encodeUserDeepGroupsInner) model.groups
            ]
    in
    pairs


encodeUserDeepGroupsInner : UserDeepGroupsInner -> Json.Encode.Value
encodeUserDeepGroupsInner =
    encodeObject << encodeUserDeepGroupsInnerPairs


encodeUserDeepGroupsInnerWithTag : ( String, String ) -> UserDeepGroupsInner -> Json.Encode.Value
encodeUserDeepGroupsInnerWithTag ( tagField, tag ) model =
    encodeObject (encodeUserDeepGroupsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserDeepGroupsInnerPairs : UserDeepGroupsInner -> List EncodedField
encodeUserDeepGroupsInnerPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , maybeEncode "permissions" (Json.Encode.list Json.Encode.int) model.permissions
            ]
    in
    pairs


encodeUserShallow : UserShallow -> Json.Encode.Value
encodeUserShallow =
    encodeObject << encodeUserShallowPairs


encodeUserShallowWithTag : ( String, String ) -> UserShallow -> Json.Encode.Value
encodeUserShallowWithTag ( tagField, tag ) model =
    encodeObject (encodeUserShallowPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserShallowPairs : UserShallow -> List EncodedField
encodeUserShallowPairs model =
    let
        pairs =
            [ maybeEncode "id" Uuid.encode model.id
            , maybeEncode "roles" (Json.Encode.list Json.Encode.string) model.roles
            , maybeEncode "current_class" Json.Encode.string model.currentClass
            , maybeEncodeNullable "last_login" Api.Time.encodeDateTime model.lastLogin
            , maybeEncode "is_superuser" Json.Encode.bool model.isSuperuser
            , encode "username" Json.Encode.string model.username
            , maybeEncode "first_name" Json.Encode.string model.firstName
            , maybeEncode "last_name" Json.Encode.string model.lastName
            , maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "is_staff" Json.Encode.bool model.isStaff
            , maybeEncode "is_active" Json.Encode.bool model.isActive
            , maybeEncode "date_joined" Api.Time.encodeDateTime model.dateJoined
            , maybeEncode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updated_at" Api.Time.encodeDateTime model.updatedAt
            , maybeEncodeNullable "middle_name" Json.Encode.string model.middleName
            , maybeEncodeNullable "birth_date" Api.Time.encodeDate model.birthDate
            , maybeEncodeNullable "avatar" Json.Encode.string model.avatar
            , maybeEncode "groups" (Json.Encode.list Json.Encode.int) model.groups
            , maybeEncode "children" (Json.Encode.list Uuid.encode) model.children
            ]
    in
    pairs



-- DECODER


activityDecoder : Json.Decode.Decoder Activity
activityDecoder =
    Json.Decode.succeed Activity
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "content_type" activityContentTypeDecoder Nothing
        |> decode "title" Json.Decode.string
        |> maybeDecode "keywords" Json.Decode.string Nothing
        |> maybeDecode "lesson_type" Json.Decode.string Nothing
        |> maybeDecode "is_hidden" Json.Decode.bool Nothing
        |> maybeDecode "marks_limit" Json.Decode.int Nothing
        |> maybeDecode "hours" Json.Decode.int Nothing
        |> maybeDecode "fgos_complient" Json.Decode.bool Nothing
        |> decode "order" Json.Decode.int
        |> maybeDecodeNullable "date" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "group" Json.Decode.string Nothing
        |> maybeDecodeNullable "scientific_topic" Json.Decode.string Nothing
        |> maybeDecode "body" Json.Decode.string Nothing
        |> maybeDecodeNullable "due_date" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "submittable" Json.Decode.bool Nothing
        |> maybeDecodeNullable "link" Json.Decode.string Nothing
        |> maybeDecode "embed" Json.Decode.bool Nothing
        |> maybeDecodeNullable "final_type" activityFinalTypeDecoder Nothing
        |> decode "course" Uuid.decoder
        |> maybeDecodeNullable "linked_activity" Uuid.decoder Nothing
        |> maybeDecode "files" (Json.Decode.list Uuid.decoder) Nothing


activityContentTypeDecoder : Json.Decode.Decoder ActivityContentType
activityContentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "GEN" ->
                        Json.Decode.succeed ActivityContentTypeGEN

                    "TXT" ->
                        Json.Decode.succeed ActivityContentTypeTXT

                    "TSK" ->
                        Json.Decode.succeed ActivityContentTypeTSK

                    "LNK" ->
                        Json.Decode.succeed ActivityContentTypeLNK

                    "MED" ->
                        Json.Decode.succeed ActivityContentTypeMED

                    "FIN" ->
                        Json.Decode.succeed ActivityContentTypeFIN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


activityFinalTypeDecoder : Json.Decode.Decoder ActivityFinalType
activityFinalTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "Q1" ->
                        Json.Decode.succeed ActivityFinalTypeQ1

                    "Q2" ->
                        Json.Decode.succeed ActivityFinalTypeQ2

                    "Q3" ->
                        Json.Decode.succeed ActivityFinalTypeQ3

                    "Q4" ->
                        Json.Decode.succeed ActivityFinalTypeQ4

                    "H1" ->
                        Json.Decode.succeed ActivityFinalTypeH1

                    "H2" ->
                        Json.Decode.succeed ActivityFinalTypeH2

                    "Y" ->
                        Json.Decode.succeed ActivityFinalTypeY

                    "E" ->
                        Json.Decode.succeed ActivityFinalTypeE

                    "F" ->
                        Json.Decode.succeed ActivityFinalTypeF

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


bulkSetActivitiesDecoder : Json.Decode.Decoder BulkSetActivities
bulkSetActivitiesDecoder =
    Json.Decode.succeed BulkSetActivities
        |> decode "create" (Json.Decode.list activityDecoder)
        |> decode "update" (Json.Decode.dict activityDecoder)


countersDecoder : Json.Decode.Decoder Counters
countersDecoder =
    Json.Decode.succeed Counters
        |> decode "courses" Json.Decode.int
        |> decode "users" Json.Decode.int
        |> decode "activities" Json.Decode.int
        |> decode "marks" Json.Decode.int


courseDeepDecoder : Json.Decode.Decoder CourseDeep
courseDeepDecoder =
    Json.Decode.succeed CourseDeep
        |> maybeDecode "id" Uuid.decoder Nothing
        |> decodeNullable "for_specialization" educationSpecializationDecoder
        |> decodeNullable "logo" fileDecoder
        |> decodeNullable "cover" fileDecoder
        |> decode "activities" (Json.Decode.list activityDecoder)
        |> decode "enrollments" (Json.Decode.list courseEnrollmentReadDecoder)
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "type" courseDeepTypeDecoder Nothing
        |> decode "title" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> maybeDecode "for_class" Json.Decode.string Nothing
        |> maybeDecodeNullable "for_group" Json.Decode.string Nothing


courseDeepTypeDecoder : Json.Decode.Decoder CourseDeepType
courseDeepTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "GEN" ->
                        Json.Decode.succeed CourseDeepTypeGEN

                    "EDU" ->
                        Json.Decode.succeed CourseDeepTypeEDU

                    "SEM" ->
                        Json.Decode.succeed CourseDeepTypeSEM

                    "CLB" ->
                        Json.Decode.succeed CourseDeepTypeCLB

                    "ELE" ->
                        Json.Decode.succeed CourseDeepTypeELE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


courseEnrollmentReadDecoder : Json.Decode.Decoder CourseEnrollmentRead
courseEnrollmentReadDecoder =
    Json.Decode.succeed CourseEnrollmentRead
        |> maybeDecode "id" Uuid.decoder Nothing
        |> decode "person" userShallowDecoder
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "role" courseEnrollmentReadRoleDecoder
        |> maybeDecodeNullable "finished_on" Api.Time.dateTimeDecoder Nothing
        |> decode "course" Uuid.decoder


courseEnrollmentReadRoleDecoder : Json.Decode.Decoder CourseEnrollmentReadRole
courseEnrollmentReadRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "t" ->
                        Json.Decode.succeed CourseEnrollmentReadRoleT

                    "s" ->
                        Json.Decode.succeed CourseEnrollmentReadRoleS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


courseEnrollmentWriteDecoder : Json.Decode.Decoder CourseEnrollmentWrite
courseEnrollmentWriteDecoder =
    Json.Decode.succeed CourseEnrollmentWrite
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "role" courseEnrollmentWriteRoleDecoder
        |> maybeDecodeNullable "finished_on" Api.Time.dateTimeDecoder Nothing
        |> decode "person" Uuid.decoder
        |> decode "course" Uuid.decoder


courseEnrollmentWriteRoleDecoder : Json.Decode.Decoder CourseEnrollmentWriteRole
courseEnrollmentWriteRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "t" ->
                        Json.Decode.succeed CourseEnrollmentWriteRoleT

                    "s" ->
                        Json.Decode.succeed CourseEnrollmentWriteRoleS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


courseShallowDecoder : Json.Decode.Decoder CourseShallow
courseShallowDecoder =
    Json.Decode.succeed CourseShallow
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "type" courseShallowTypeDecoder Nothing
        |> decode "title" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> maybeDecode "for_class" Json.Decode.string Nothing
        |> maybeDecodeNullable "for_group" Json.Decode.string Nothing
        |> maybeDecodeNullable "for_specialization" Uuid.decoder Nothing
        |> maybeDecodeNullable "logo" Uuid.decoder Nothing
        |> maybeDecodeNullable "cover" Uuid.decoder Nothing


courseShallowTypeDecoder : Json.Decode.Decoder CourseShallowType
courseShallowTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "GEN" ->
                        Json.Decode.succeed CourseShallowTypeGEN

                    "EDU" ->
                        Json.Decode.succeed CourseShallowTypeEDU

                    "SEM" ->
                        Json.Decode.succeed CourseShallowTypeSEM

                    "CLB" ->
                        Json.Decode.succeed CourseShallowTypeCLB

                    "ELE" ->
                        Json.Decode.succeed CourseShallowTypeELE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


departmentDecoder : Json.Decode.Decoder Department
departmentDecoder =
    Json.Decode.succeed Department
        |> maybeDecode "id" Uuid.decoder Nothing
        |> decode "organization" organizationDecoder
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "name" Json.Decode.string


educationShallowDecoder : Json.Decode.Decoder EducationShallow
educationShallowDecoder =
    Json.Decode.succeed EducationShallow
        |> maybeDecode "id" Uuid.decoder Nothing
        |> decodeNullable "specialization" educationSpecializationDecoder
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "started" Api.Time.dateDecoder
        |> maybeDecodeNullable "finished" Api.Time.dateDecoder Nothing
        |> decode "starting_class" Json.Decode.string
        |> maybeDecodeNullable "finishing_class" Json.Decode.string Nothing
        |> decode "student" Uuid.decoder


educationSpecializationDecoder : Json.Decode.Decoder EducationSpecialization
educationSpecializationDecoder =
    Json.Decode.succeed EducationSpecialization
        |> maybeDecode "id" Uuid.decoder Nothing
        |> decode "department" departmentDecoder
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "name" Json.Decode.string


errorMessageDecoder : Json.Decode.Decoder ErrorMessage
errorMessageDecoder =
    Json.Decode.succeed ErrorMessage
        |> decode "code" Json.Decode.int
        |> decode "message" Json.Decode.string


fileDecoder : Json.Decode.Decoder File
fileDecoder =
    Json.Decode.succeed File
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "download_url" Json.Decode.string Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "name" Json.Decode.string
        |> decode "hash" Json.Decode.string
        |> decode "size" Json.Decode.int
        |> decode "mime_type" Json.Decode.string


importForCourseDecoder : Json.Decode.Decoder ImportForCourse
importForCourseDecoder =
    Json.Decode.succeed ImportForCourse
        |> decode "data" Json.Decode.string
        |> decode "sep" Json.Decode.string
        |> decode "course_id" Uuid.decoder


importForCourseResultDecoder : Json.Decode.Decoder ImportForCourseResult
importForCourseResultDecoder =
    Json.Decode.succeed ImportForCourseResult
        |> decode "objects" (Json.Decode.list importForCourseResultObjectDecoder)


importForCourseResultObjectDecoder : Json.Decode.Decoder ImportForCourseResultObject
importForCourseResultObjectDecoder =
    Json.Decode.succeed ImportForCourseResultObject
        |> decode "index" Json.Decode.int
        |> decode "type" Json.Decode.string
        |> decode "topic" Json.Decode.string


loginDecoder : Json.Decode.Decoder Login
loginDecoder =
    Json.Decode.succeed Login
        |> decode "username" Json.Decode.string
        |> decode "password" Json.Decode.string


markDecoder : Json.Decode.Decoder Mark
markDecoder =
    Json.Decode.succeed Mark
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "value" Json.Decode.string
        |> maybeDecode "comment" Json.Decode.string Nothing
        |> decode "author" Uuid.decoder
        |> decode "student" Uuid.decoder
        |> decode "activity" Uuid.decoder


messageDecoder : Json.Decode.Decoder Message
messageDecoder =
    Json.Decode.succeed Message
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "type" messageTypeDecoder Nothing
        |> maybeDecode "body" Json.Decode.string Nothing
        |> maybeDecodeNullable "manual_category" Json.Decode.string Nothing
        |> maybeDecodeNullable "manual_audience" Json.Decode.string Nothing
        |> maybeDecodeNullable "thread" Uuid.decoder Nothing
        |> decode "sender" Uuid.decoder
        |> maybeDecodeNullable "receiver" Uuid.decoder Nothing
        |> maybeDecode "attachments" (Json.Decode.list Uuid.decoder) Nothing


messageTypeDecoder : Json.Decode.Decoder MessageType
messageTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "THR" ->
                        Json.Decode.succeed MessageTypeTHR

                    "PRV" ->
                        Json.Decode.succeed MessageTypePRV

                    "NEW" ->
                        Json.Decode.succeed MessageTypeNEW

                    "MAN" ->
                        Json.Decode.succeed MessageTypeMAN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


organizationDecoder : Json.Decode.Decoder Organization
organizationDecoder =
    Json.Decode.succeed Organization
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "name" Json.Decode.string
        |> maybeDecodeNullable "name_short" Json.Decode.string Nothing


resetPasswordCompleteDecoder : Json.Decode.Decoder ResetPasswordComplete
resetPasswordCompleteDecoder =
    Json.Decode.succeed ResetPasswordComplete
        |> decode "password" Json.Decode.string
        |> decode "token" Json.Decode.string


resetPasswordRequestDecoder : Json.Decode.Decoder ResetPasswordRequest
resetPasswordRequestDecoder =
    Json.Decode.succeed ResetPasswordRequest
        |> decode "login" Json.Decode.string


setEmailDecoder : Json.Decode.Decoder SetEmail
setEmailDecoder =
    Json.Decode.succeed SetEmail
        |> decode "email" Json.Decode.string


setPasswordDecoder : Json.Decode.Decoder SetPassword
setPasswordDecoder =
    Json.Decode.succeed SetPassword
        |> decode "password" Json.Decode.string


tokenDecoder : Json.Decode.Decoder Token
tokenDecoder =
    Json.Decode.succeed Token
        |> decode "user" userDeepDecoder
        |> decode "key" Json.Decode.string


unreadObjectDecoder : Json.Decode.Decoder UnreadObject
unreadObjectDecoder =
    Json.Decode.succeed UnreadObject
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> decode "obj" Uuid.decoder
        |> maybeDecode "type" unreadObjectTypeDecoder Nothing
        |> decode "created" Api.Time.dateTimeDecoder
        |> decode "user" Uuid.decoder


unreadObjectTypeDecoder : Json.Decode.Decoder UnreadObjectType
unreadObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MSG" ->
                        Json.Decode.succeed UnreadObjectTypeMSG

                    "MRK" ->
                        Json.Decode.succeed UnreadObjectTypeMRK

                    "CRS" ->
                        Json.Decode.succeed UnreadObjectTypeCRS

                    "ACT" ->
                        Json.Decode.succeed UnreadObjectTypeACT

                    "NWS" ->
                        Json.Decode.succeed UnreadObjectTypeNWS

                    "EDU" ->
                        Json.Decode.succeed UnreadObjectTypeEDU

                    "FLE" ->
                        Json.Decode.succeed UnreadObjectTypeFLE

                    "FRM" ->
                        Json.Decode.succeed UnreadObjectTypeFRM

                    "TSK" ->
                        Json.Decode.succeed UnreadObjectTypeTSK

                    "UNK" ->
                        Json.Decode.succeed UnreadObjectTypeUNK

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


userDeepDecoder : Json.Decode.Decoder UserDeep
userDeepDecoder =
    Json.Decode.succeed UserDeep
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "roles" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "current_class" Json.Decode.string Nothing
        |> decode "children" (Json.Decode.list userShallowDecoder)
        |> decode "parents" (Json.Decode.list userShallowDecoder)
        |> decode "education" (Json.Decode.list educationShallowDecoder)
        |> maybeDecodeNullable "last_login" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "is_superuser" Json.Decode.bool Nothing
        |> decode "username" Json.Decode.string
        |> maybeDecode "first_name" Json.Decode.string Nothing
        |> maybeDecode "last_name" Json.Decode.string Nothing
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "is_staff" Json.Decode.bool Nothing
        |> maybeDecode "is_active" Json.Decode.bool Nothing
        |> maybeDecode "date_joined" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "middle_name" Json.Decode.string Nothing
        |> maybeDecodeNullable "birth_date" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "avatar" Json.Decode.string Nothing
        |> maybeDecode "groups" (Json.Decode.list userDeepGroupsInnerDecoder) Nothing


userDeepGroupsInnerDecoder : Json.Decode.Decoder UserDeepGroupsInner
userDeepGroupsInnerDecoder =
    Json.Decode.succeed UserDeepGroupsInner
        |> maybeDecode "id" Json.Decode.int Nothing
        |> decode "name" Json.Decode.string
        |> maybeDecode "permissions" (Json.Decode.list Json.Decode.int) Nothing


userShallowDecoder : Json.Decode.Decoder UserShallow
userShallowDecoder =
    Json.Decode.succeed UserShallow
        |> maybeDecode "id" Uuid.decoder Nothing
        |> maybeDecode "roles" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "current_class" Json.Decode.string Nothing
        |> maybeDecodeNullable "last_login" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "is_superuser" Json.Decode.bool Nothing
        |> decode "username" Json.Decode.string
        |> maybeDecode "first_name" Json.Decode.string Nothing
        |> maybeDecode "last_name" Json.Decode.string Nothing
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "is_staff" Json.Decode.bool Nothing
        |> maybeDecode "is_active" Json.Decode.bool Nothing
        |> maybeDecode "date_joined" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "created_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updated_at" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "middle_name" Json.Decode.string Nothing
        |> maybeDecodeNullable "birth_date" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "avatar" Json.Decode.string Nothing
        |> maybeDecode "groups" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "children" (Json.Decode.list Uuid.decoder) Nothing



-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f
